import plotly.io as pio
pio.renderers.default = 'notebook'





%matplotlib inline




!pip install google-api-python-client pandas matplotlib seaborn textblob
!python -m textblob.download_corpora






from googleapiclient.discovery import build
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from textblob import TextBlob
import datetime

# ===🔑 SETUP: API Key & Channel ID ===
API_KEY = "AIzaSyCZBAk59AKUYZkdeMug20vorgKxk1S-_Co"
CHANNEL_ID = "UC3IZKseVpdzPSBaWxBxundA"  # BTS official channel

youtube = build('youtube', 'v3', developerKey=API_KEY)






def get_channel_stats(youtube, channel_id):
    request = youtube.channels().list(
        part='snippet,contentDetails,statistics',
        id=channel_id
    )
    response = request.execute()
    data = response['items'][0]
    
    return {
        'channel_name': data['snippet']['title'],
        'subscribers': int(data['statistics']['subscriberCount']),
        'total_views': int(data['statistics']['viewCount']),
        'total_videos': int(data['statistics']['videoCount']),
        'uploads_playlist_id': data['contentDetails']['relatedPlaylists']['uploads']
    }

channel_info = get_channel_stats(youtube, CHANNEL_ID)
print("✅ Channel Info:", channel_info)





# ===📥 FETCH ALL VIDEO IDS ===
def get_all_video_ids(youtube, playlist_id):
    video_ids = []
    next_page_token = None

    while True:
        request = youtube.playlistItems().list(
            part='snippet',
            playlistId=playlist_id,
            maxResults=50,
            pageToken=next_page_token
        )
        response = request.execute()

        for item in response['items']:
            video_ids.append(item['snippet']['resourceId']['videoId'])

        next_page_token = response.get('nextPageToken')
        if not next_page_token:
            break

    return video_ids

video_ids = get_all_video_ids(youtube, channel_info['uploads_playlist_id'])
print(f"✅ Total videos fetched: {len(video_ids)}")






# ===📊 FETCH VIDEO DETAILS ===
def get_video_details(youtube, video_ids):
    all_data = []

    for i in range(0, len(video_ids), 50):
        request = youtube.videos().list(
            part="snippet,statistics",
            id=','.join(video_ids[i:i+50])
        )
        response = request.execute()

        for video in response['items']:
            stats = video['statistics']
            snippet = video['snippet']
            all_data.append({
                'title': snippet['title'],
                'published': snippet['publishedAt'],
                'views': int(stats.get('viewCount', 0)),
                'likes': int(stats.get('likeCount', 0)),
                'comments': int(stats.get('commentCount', 0)),
                'video_id': video['id']
            })

    return pd.DataFrame(all_data)

df = get_video_details(youtube, video_ids)
df['published'] = pd.to_datetime(df['published'])






# ===✅ FILTER: From 2010 to present ===
df = df[df['published'].dt.year >= 2010]

# ===🧮 Additional Metrics ===
df['year'] = df['published'].dt.year
df['engagement'] = (df['likes'] + df['comments']) / df['views']






# ===📈 VIEWS & LIKES TREND ===
yearly_stats = df.groupby('year')[['views', 'likes']].sum().reset_index()

plt.figure(figsize=(12, 6))
sns.lineplot(data=yearly_stats, x='year', y='views', label='Views', marker='o')
sns.lineplot(data=yearly_stats, x='year', y='likes', label='Likes', marker='s')

plt.title('📊 Total Views and Likes Per Year (2010–Present)')
plt.xlabel("Year")
plt.ylabel("Total Count")
plt.xticks(yearly_stats['year'])
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()






# ===💬 SENTIMENT ANALYSIS ===
def get_video_comments(youtube, video_id, max_comments=50):
    comments = []
    try:
        request = youtube.commentThreads().list(
            part='snippet',
            videoId=video_id,
            maxResults=min(100, max_comments),
            textFormat='plainText'
        )
        response = request.execute()
        for item in response['items']:
            comment = item['snippet']['topLevelComment']['snippet']['textDisplay']
            comments.append(comment)
    except Exception as e:
        print(f"❌ Failed to fetch comments for video {video_id}: {e}")
    return comments

def get_video_sentiments(youtube, video_ids, max_comments=50):
    sentiments = []
    for i, vid in enumerate(video_ids):
        comments = get_video_comments(youtube, vid, max_comments)
        
        # Only show comment count for the first 5 videos
        if i < 5:
            print(f"📹 Video ID {vid}: {len(comments)} comments")
        
        if comments:
            scores = [TextBlob(c).sentiment.polarity for c in comments]
            avg = sum(scores) / len(scores)
        else:
            avg = 0
        sentiments.append(avg)
    return sentiments







# ===📉 SENTIMENT TREND CHART ===
yearly_sentiment = df.groupby('year')['sentiment'].mean().reset_index()

plt.figure(figsize=(12, 6))
sns.lineplot(data=yearly_sentiment, x='year', y='sentiment', marker='o', color='green')
plt.title("💚 Average Sentiment of Comments Over Time")
plt.ylabel("Sentiment Polarity")
plt.xlabel("Year")
plt.grid(True)
plt.tight_layout()
plt.show()





# 🔍 Most Viewed Video
best_views = df.loc[df['views'].idxmax()]
print("🏆 Most Viewed Video:")
print(f"{best_views['title']} — {best_views['views']} views")

# 👍 Most Liked Video
best_likes = df.loc[df['likes'].idxmax()]
print("\n❤️ Most Liked Video:")
print(f"{best_likes['title']} — {best_likes['likes']} likes")

# 📣 Highest Engagement Video
best_engagement = df.loc[df['engagement'].idxmax()]
print("\n📢 Highest Engagement Rate:")
print(f"{best_engagement['title']} — {best_engagement['engagement']:.2f} engagement")

# 😊 Most Positive Sentiment
if 'sentiment' in df.columns:
    best_sentiment = df.loc[df['sentiment'].idxmax()]
    print("\n😊 Most Positive Sentiment:")
    print(f"{best_sentiment['title']} — Sentiment Score: {best_sentiment['sentiment']:.2f}")






top_performers = pd.DataFrame({
    '🏆 Metric': [
        '📺 Most Viewed Video',
        '👍 Most Liked Video',
        '💬 Top Engagement Video',
        '😊 Most Positive Sentiment'
    ],
    '🎬 Video Title': [
        best_views['title'],
        best_likes['title'],
        best_engagement['title'],
        best_sentiment['title'] if 'sentiment' in df.columns and best_sentiment is not None else 'N/A'
    ],
    '📊 Value': [
        f"{best_views['views']:,} views",
        f"{best_likes['likes']:,} likes",
        f"{best_engagement['engagement']:.4f} engagement",
        f"{best_sentiment['sentiment']:.2f} sentiment" if 'sentiment' in df.columns and best_sentiment is not None else 'N/A'
    ]
})

top_performers.style.set_table_styles([
    {'selector': 'th', 'props': [('font-size', '14px'), ('text-align', 'center')]},
    {'selector': 'td', 'props': [('font-size', '13px')]},
]).set_properties(**{'text-align': 'left'})







import plotly.graph_objects as go

# Raw values from earlier
metrics = ['Most Viewed', 'Most Liked', 'Top Engagement', 'Top Sentiment']
# Replace zeros and near-zeros with a small number (e.g., 0.1)
values = [
    max(best_views['views'], 0.1),
    max(best_likes['likes'], 0.1),
    max(best_engagement['engagement'], 0.1),
    max(best_sentiment['sentiment'], 0.1) if best_sentiment is not None else 0.1
]

titles = [
    best_views['title'],
    best_likes['title'],
    best_engagement['title'],
    best_sentiment['title'] if best_sentiment is not None else 'N/A'
]

# Create interactive horizontal bar chart with log scale
fig = go.Figure(go.Bar(
    y=metrics,
    x=values,
    orientation='h',
    marker_color=['skyblue', 'lightgreen', 'orange', 'plum'],
    text=titles,
    textposition='auto',
    hoverinfo='text+x'
))

fig.update_layout(
    title="🏆 Top Performing YouTube Videos by Metric (Log Scale)",
    xaxis_title="Metric Value (Log Scale)",
    yaxis_title="Metric Type",
    template='plotly_white',
    height=500,
    xaxis_type='log'  # 🔍 Logarithmic axis
)

fig.show()
